from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio
from supabase import create_client
import os

API_TOKEN = os.getenv("API_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")]
    ],
    resize_keyboard=True
)

categories_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî• –°—Ä–æ—á–Ω—ã–µ"), KeyboardButton(text="‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ")]
    ],
    resize_keyboard=True
)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    response = supabase.table("users").select("*").eq("telegram_id", str(user_id)).execute()
    if not response.data:
        supabase.table("users").insert({
            "telegram_id": str(user_id),
            "username": username
        }).execute()
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!", reply_markup=main_keyboard)
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    dp.message.register(save_task)

async def save_task(message: types.Message):
    task_text = message.text
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=categories_keyboard)
    dp.message.register(select_category, state=task_text)

async def select_category(message: types.Message, state):
    status = message.text
    task_text = state
    supabase.table("tasks").insert({
        "user_id": str(message.from_user.id),
        "text": task_text,
        "status": status
    }).execute()

    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
async def view_tasks(message: types.Message):
    response = supabase.table("tasks").select("*").eq("user_id", str(message.from_user.id)).execute()
    tasks = response.data
    if tasks:
        text = "\n".join([f"{task['status']} ‚Äî {task['text']}" for task in tasks])
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."
    await message.answer(text, reply_markup=main_keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
