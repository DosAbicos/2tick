from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
import os
from supabase import create_client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
API_TOKEN = os.getenv("API_TOKEN")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")

category_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
category_keyboard.add("üî• –°—Ä–æ—á–Ω—ã–µ", "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
category_keyboard.add("üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ")

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

    @dp.message()
    async def task_text(message: types.Message):
        global task_text_global
        task_text_global = message.text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=category_keyboard)

@dp.message(lambda message: message.text in ["üî• –°—Ä–æ—á–Ω—ã–µ", "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ"])
async def category(message: types.Message):
    category_dict = {
        "üî• –°—Ä–æ—á–Ω—ã–µ": "üî•",
        "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ": "‚úÖ",
        "üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ": "üîÅ",
        "‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ": "‚ùå"
    }
    status = category_dict[message.text]
    supabase.table("tasks").insert({
        "user_id": str(message.from_user.id),
        "text": task_text_global,
        "status": status
    }).execute()
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
async def view_tasks(message: types.Message):
    response = supabase.table("tasks").select("text", "status").eq("user_id", str(message.from_user.id)).execute()
    tasks = response.data
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        task_list = "\n".join([f"{task['status']} {task['text']}" for task in tasks])
        await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{task_list}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
