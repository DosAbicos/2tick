import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = os.getenv("API_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
scheduler = AsyncIOScheduler()

logging.basicConfig(level=logging.INFO)

user_tasks = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    response = supabase.table("users").select("*").eq("telegram_id", user_id).execute()

    if len(response.data) == 0:
        supabase.table("users").insert({
            "telegram_id": user_id,
            "username": username
        }).execute()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á", callback_data="view_tasks")]
    ])

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

@dp.callback_query(F.data == "add_task")
async def add_task_callback(callback: types.CallbackQuery):
    user_tasks[callback.from_user.id] = True
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º:")
    await callback.answer()

@dp.message()
async def process_task(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if user_tasks.get(user_id):
        user_tasks[user_id] = False

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –°–¥–µ–ª–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", callback_data=f"urgent")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"planned")],
            [InlineKeyboardButton(text="üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"delegate")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete")]
        ])

        user_tasks[user_id] = text
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏: {text}", reply_markup=keyboard)

@dp.callback_query()
async def process_category(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data
    task_text = user_tasks.get(user_id)

    if task_text:
        user = supabase.table("users").select("id").eq("telegram_id", user_id).execute()
        if len(user.data) > 0:
            user_uuid = user.data[0]["id"]
            supabase.table("tasks").insert({
                "user_id": user_uuid,
                "text": task_text,
                "status": category,
                "created_at": datetime.now().isoformat()
            }).execute()

            await callback.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text} ‚Äî {category}")
            del user_tasks[user_id]
        await callback.answer()

@dp.callback_query(F.data == "view_tasks")
async def view_tasks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = supabase.table("users").select("id").eq("telegram_id", user_id).execute()
    if len(user.data) > 0:
        user_uuid = user.data[0]["id"]
        tasks = supabase.table("tasks").select("*").eq("user_id", user_uuid).execute()
        if len(tasks.data) > 0:
            text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
            for task in tasks.data:
                text += f"{task['text']} ‚Äî {task['status']}\n"
            await callback.message.answer(text)
        else:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
    await callback.answer()

async def send_reminders():
    users = supabase.table("users").select("telegram_id").execute()
    for user in users.data:
        try:
            await bot.send_message(chat_id=user["telegram_id"], text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")

async def main():
    scheduler.add_job(send_reminders, "cron", hour=22, minute=45)
    scheduler.start()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
