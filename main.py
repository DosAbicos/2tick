import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
from dotenv import load_dotenv
from supabase import create_client, Client

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TaskForm(StatesGroup):
    text = State()
    category = State()

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")],
], resize_keyboard=True)

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á
category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî• –°—Ä–æ—á–Ω—ã–µ", callback_data="urgent"),
     InlineKeyboardButton(text="‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="planned")],
    [InlineKeyboardButton(text="üîÅ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="delegated"),
     InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ", callback_data="deleted")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = supabase.table("users").select("id").eq("telegram_id", telegram_id).single().execute()

    if user.data:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_menu)
    else:
        supabase.table("users").insert({"telegram_id": telegram_id, "username": username}).execute()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Totick! –ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(TaskForm.text)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.text)
async def process_task_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:", reply_markup=category_keyboard)
    await state.set_state(TaskForm.category)

# –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏
@dp.callback_query(TaskForm.category)
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task_text = data["text"]
    category = callback.data
    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ telegram_id
    user = supabase.table("users").select("id").eq("telegram_id", telegram_id).single().execute()
    user_id = user.data["id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    supabase.table("tasks").insert({
        "user_id": user_id,
        "text": task_text,
        "category": category,
        "status": "new"
    }).execute()

    await callback.message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()

    await callback.answer()

if __name__ == "__main__":
    dp.run_polling(bot)
